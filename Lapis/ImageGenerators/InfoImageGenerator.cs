using System;
using System.IO;
using Lapis.Commands.GroupCommands;
using Lapis.Commands.GroupCommands.MaiCommands;
using Lapis.Operations.ImageOperation;
using HorizontalAlignment = Lapis.Operations.ImageOperation.HorizontalAlignment;

namespace Lapis.ImageGenerators;

public class InfoImageGenerator
{
    private string _coverImagePath;

    private Image GenerateBackground(SongDto song, string title)
    {
        var image = new Image(Path.Combine(Environment.CurrentDirectory, "resource/random/background.png"));

        _coverImagePath = File.Exists(Path.Combine(Environment.CurrentDirectory, "resource/covers_hd",
            song.Id + ".png"))
            ? Path.Combine(Environment.CurrentDirectory, "resource/covers_hd", song.Id + ".png")
            : Path.Combine(Environment.CurrentDirectory, "resource/covers", "1000.png");

        var backgroundCoverImage = new Image(_coverImagePath);

        backgroundCoverImage.Resize(64, 64);
        backgroundCoverImage.GaussianBlur(5);
        backgroundCoverImage.Resize(1400, 1400);
        backgroundCoverImage.DrawImage(image, 0, 0);

        image.Dispose();

        image = backgroundCoverImage;

        image.Crop(1400, 1280);

        var backgroundLayer = new Image(1280, 1280);

        backgroundLayer.DrawText(song.Title,
            new Color(1f, 1f, 1f, 0.081f),
            400,
            FontWeight.Heavy,
            0, 310);
        backgroundLayer.Rotate(-90);

        image.DrawImage(backgroundLayer, 0, -150);

        backgroundLayer.Dispose();

        image.DrawText(title, new Color(1f, 1f, 1f, 0.08f), 42, FontWeight.Regular, 10, 1200);
        image.DrawText($"Generated by {BotConfiguration.Instance.BotName}", new Color(1f, 1f, 1f, 0.08f), 24, FontWeight.Regular, 10, 1234);
        
        return image;
    }

    private Image GenerateDifficultyLayer(SongDto song, InfoCommand.GetScore.Level[] levels)
    {
        var difficultyLayerImage = new Image(6600, 1080, new Color(0, 0, 0, 0));
        if (levels != null)
        {
            Image image = null;
            foreach (var level in levels)
            {
                var y = 0;
                switch (level.LevelIndex)
                {
                    case 0:
                        y = 0;
                        break;
                    case 1:
                        y = 137;
                        break;
                    case 2:
                        y = 274;
                        break;
                    case 3:
                        y = 411;
                        break;
                    case 4:
                        y = 548;
                        break;
                }

                var x = 0;

                difficultyLayerImage.DrawText(level.Achievement.ToString("0.0000") + "% ", Color.White, 24,
                    FontWeight.Light, 0, y + 88);

                if (level.Achievement.ToString("0.0000").Length ==
                    8)
                    x = 130;
                if (level.Achievement.ToString("0.0000").Length ==
                    7)
                    x = 117;
                if (level.Achievement.ToString("0.0000").Length ==
                    6)
                    x = 104;

                if (level.Rate == MaiCommandBase.Rate.Sss)
                    image = new Image(Environment.CurrentDirectory + "/resource/ratings/sss.png");
                else if (level.Rate == MaiCommandBase.Rate.Sssp)
                    image = new Image(Environment.CurrentDirectory + "/resource/ratings/sss_plus.png");
                else if (level.Rate == MaiCommandBase.Rate.Ss)
                    image = new Image(Environment.CurrentDirectory + "/resource/ratings/ss.png");
                else if (level.Rate == MaiCommandBase.Rate.Ssp)
                    image = new Image(Environment.CurrentDirectory + "/resource/ratings/ss_plus.png");
                else if (level.Rate == MaiCommandBase.Rate.Sp)
                    image = new Image(Environment.CurrentDirectory + "/resource/ratings/s_plus.png");
                else if (level.Rate == MaiCommandBase.Rate.S)
                    image = new Image(Environment.CurrentDirectory + "/resource/ratings/s.png");
                else if (level.Rate == MaiCommandBase.Rate.Aaa)
                    image = new Image(Environment.CurrentDirectory + "/resource/ratings/aaa.png");
                else if (level.Rate == MaiCommandBase.Rate.Aa)
                    image = new Image(Environment.CurrentDirectory + "/resource/ratings/aa.png");
                else if (level.Rate == MaiCommandBase.Rate.A)
                    image = new Image(Environment.CurrentDirectory + "/resource/ratings/a.png");
                else if (level.Rate == MaiCommandBase.Rate.Bbb)
                    image = new Image(Environment.CurrentDirectory + "/resource/ratings/bbb.png");
                else if (level.Rate == MaiCommandBase.Rate.Bb)
                    image = new Image(Environment.CurrentDirectory + "/resource/ratings/bb.png");
                else if (level.Rate == MaiCommandBase.Rate.B)
                    image = new Image(Environment.CurrentDirectory + "/resource/ratings/b.png");
                else if (level.Rate == MaiCommandBase.Rate.C)
                    image = new Image(Environment.CurrentDirectory + "/resource/ratings/c.png");
                else if (level.Rate == MaiCommandBase.Rate.D)
                    image = new Image(Environment.CurrentDirectory + "/resource/ratings/d.png");
                if (image != null)
                {
                    if (image.Height == 22 || image.Height == 23)
                        difficultyLayerImage.DrawImage(image, x, y + 68);
                    if (image.Height == 19 || image.Height == 20 || image.Height == 18)
                        difficultyLayerImage.DrawImage(image, x, y + 71);
                    image.Dispose();
                }

                string fcIndicatorText;
                string fsIndicatorText;

                if (level.Fc.Length > 2)
                    fcIndicatorText = level.Fc.Substring(0, level.Fc.Length - 1).ToUpper() + "+";
                else
                    fcIndicatorText = level.Fc.ToUpper();
                if (level.Fs.Length > 2)
                    fsIndicatorText = level.Fs.Replace("p", "+").ToUpper();
                else
                    fsIndicatorText = level.Fs.ToUpper();

                var indicatorText = fcIndicatorText != string.Empty
                    ? fcIndicatorText + " " + fsIndicatorText
                    : fsIndicatorText;
                if (indicatorText.Length != 0)
                    indicatorText = indicatorText.TrimEnd();

                if (indicatorText == string.Empty)
                    continue;

                difficultyLayerImage.DrawText(indicatorText, new Color(1, 1, 1, 0.5f), 18, FontWeight.Regular, 0,
                    y + 63);
            }
        }

        int[] difficultyFactorYPositions = { 170, 307, 444, 581, 718 };
        int[] charterYPositions = { 124, 262, 399, 536, 673 };

        for (var i = 0; i < song.Ratings.Length; i++)
        {
            difficultyLayerImage.DrawText(song.Ratings[i].ToString("0.0"), Color.White, 24, FontWeight.Regular, 0,
                difficultyFactorYPositions[i] - 24);

            difficultyLayerImage.DrawText("fit " + song.FitRatings[i].ToString("0.00"), new Color(1, 1, 1, 0.5f),
                18, FontWeight.Light, 0, difficultyFactorYPositions[i]);

            difficultyLayerImage.DrawText(song.Charts[i].Charter == "-" ? "未知作谱者" : "by " + song.Charts[i].Charter,
                new Color(1, 1, 1, 0.5f),
                24, FontWeight.Light, 0, charterYPositions[i] - 10);
        }

        if (song.Ratings.Length == 4 && song.Id.ToString().Length != 6)
            difficultyLayerImage.DrawText("NaN", Color.White,
                40, FontWeight.Light, 0, 718);

        return difficultyLayerImage;
    }

    public string Generate(SongDto song, string title, InfoCommand.GetScore.Level[] levels, bool isCompressed)
    {
        var image = GenerateBackground(song, title);

        using (var difficultyLayer = GenerateDifficultyLayer(song, levels))
        {
            image.DrawImage(difficultyLayer, 90, 305);
        }

        using (var coverImageShadow = new Image(Environment.CurrentDirectory + "/resource/random/coverimage.png"))
        {
            image.DrawImage(coverImageShadow, 0, 0);
        }

        using (var coverImage = new Image(_coverImagePath))
        {
            coverImage.Resize(1077, 1077);
            image.DrawImage(coverImage, 324, 207);
        }

        using (var foreImage = song.Id.ToString().Length == 6
                   ? new Image(Environment.CurrentDirectory + "/resource/random/foreground_utage.png")
                   : new Image(Environment.CurrentDirectory + "/resource/random/foreground.png"))
        {
            image.DrawImage(foreImage, 0, 0);
        }

        image.DrawText(
            song.Title,
            Color.White,
            55,
            FontWeight.Regular,
            10, 190
        );

        image.DrawText(
            song.BasicInfo.Artist,
            new Color(1, 1, 1, 0.5f),
            42,
            FontWeight.Regular,
            10, 127
        );

        image.DrawText(
            "ID " + song.Id,
            new Color(1, 1, 1, 0.081f),
            90,
            FontWeight.Heavy,
            HorizontalAlignment.Right,
            1393, 87
        );

        var songTypeLayer = new Image(128, 128);

        songTypeLayer.DrawText(
            song.Type,
            new Color(1, 1, 1, 0.35f),
            36,
            FontWeight.Regular,
            0, 40
        );

        songTypeLayer.Rotate(-90);

        image.DrawImage(songTypeLayer, 30, 214);

        songTypeLayer.Dispose();

        var result = image.ToBase64(isCompressed);

        image.Dispose();

        return result;
    }
}